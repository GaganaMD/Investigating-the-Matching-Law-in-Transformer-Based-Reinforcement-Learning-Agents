# -*- coding: utf-8 -*-
"""Plots

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cn-afj1nrP72gBTtI70psTsXDUdyMKmJ
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

# Define the modified plot_results function
def plot_results(results_df, reward_histories=None):
    """
    Plot the results of the matching law experiment with only plots 1 and 3,
    equal spacing for x-ticks in plot 1, and proper x-tick labels for plot 3.

    Args:
        results_df: DataFrame with experiment results
        reward_histories: Dictionary with reward histories for each reward value
    """
    # Aggregate results by reward value
    grouped = results_df.groupby('reward_value_digit2').agg({
        'selection_rate_digit2': ['mean', 'std'],
        'reward_ratio': 'mean',
        'total_reward': 'mean'
    }).reset_index()

    # Rename columns for easier access
    grouped.columns = ['reward_value_digit2', 'selection_rate_mean', 'selection_rate_std',
                      'reward_ratio', 'avg_total_reward']

    # Create figure with only 2 subplots (removing the middle one)
    plt.figure(figsize=(12, 8))

    # Plot 1: selection rate vs reward value with equal spacing for x-ticks
    plt.subplot(2, 1, 1)
    plt.errorbar(range(len(grouped)), grouped['selection_rate_mean'],
                 yerr=grouped['selection_rate_std'], fmt='o-', capsize=5)
    plt.xlabel('Reward Value for Digit 2')
    plt.ylabel('Selection Rate for Digit 2')
    plt.title('Effect of Reward Amount on Selection Rate')
    plt.grid(True)

    # Set x-ticks with equal spacing but showing the actual reward values as labels
    plt.xticks(range(len(grouped)), grouped['reward_value_digit2'])

    # Plot 3: selection rate vs reward ratio (log-log scale for matching law)
    plt.subplot(2, 1, 2)

    # Convert selection rates to response ratios for the log-log plot
    response_ratios = grouped['selection_rate_mean'] / (1 - grouped['selection_rate_mean'])

    plt.loglog(grouped['reward_ratio'], response_ratios, 'o-')

    # Add ideal matching law line (y = x)
    min_ratio = grouped['reward_ratio'].min()
    max_ratio = grouped['reward_ratio'].max()
    ideal_line = np.linspace(min_ratio, max_ratio, 100)
    plt.loglog(ideal_line, ideal_line, 'k--', label='Ideal Matching')

    plt.xlabel('Reward Ratio (Digit 2 / Digit 5)')
    plt.ylabel('Response Ratio (Digit 2 / Digit 5)')
    plt.title('Matching Law: Log-Log Plot of Response Ratio vs Reward Ratio')
    plt.legend()
    plt.grid(True)

    # For log-log plot, explicitly format the x-ticks to show the actual ratio values
    plt.xticks(grouped['reward_ratio'], [f'{ratio:.2f}' for ratio in grouped['reward_ratio']])

    plt.tight_layout()
    plt.savefig('matching_law_results.png')
    plt.show()

# Load the saved results
results = pd.read_csv('matching_law_results.csv')

# Print unique reward values to verify data points
print("Reward values in the dataset:", sorted(results['reward_value_digit2'].unique()))

# Generate the new plots (without reward histories)
plot_results(results)

# Print summary statistics
print("\nSummary Statistics:")
summary = results.groupby('reward_value_digit2').agg({
    'selection_rate_digit2': ['mean', 'std', 'count'],
    'reward_ratio': 'mean',
    'response_ratio': 'mean',
    'total_reward': ['mean', 'std']
})
print(summary)

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

def plot_combined_results(binary_results_df, multi_digit_results_df, target_digit=2):
    """
    Plot results from both experiments in a 2x2 grid for comparison.

    Args:
        binary_results_df: DataFrame with experiment 1 results (binary choice)
        multi_digit_results_df: DataFrame with experiment 2 results (multi-digit)
        target_digit: The digit whose reward was varied in the multi-digit experiment
    """
    # Create a 2x2 figure
    fig, axs = plt.subplots(2, 2, figsize=(16, 12))

    # ------- LEFT COLUMN: Binary Choice Experiment (Experiment 1) -------

    # 1. TOP LEFT: Selection rate vs reward value with equal spacing (Binary Choice)
    # Aggregate results by reward value
    binary_grouped = binary_results_df.groupby('reward_value_digit2').agg({
        'selection_rate_digit2': ['mean', 'std'],
        'reward_ratio': 'mean',
        'total_reward': 'mean'
    }).reset_index()

    # Rename columns for easier access
    binary_grouped.columns = ['reward_value_digit2', 'selection_rate_mean', 'selection_rate_std',
                             'reward_ratio', 'avg_total_reward']

    # Plot 1: Selection rate vs reward value with equal spacing
    ax = axs[0, 0]
    ax.errorbar(range(len(binary_grouped)), binary_grouped['selection_rate_mean'],
                yerr=binary_grouped['selection_rate_std'], fmt='o-', capsize=5)
    ax.set_xlabel('Reward Value for Digit 2')
    ax.set_ylabel('Selection Rate for Digit 2')
    ax.set_title('Experiment 1: Effect of Reward Amount on Selection Rate (2 Digits)')
    ax.grid(True)
    # Set x-ticks with equal spacing but showing the actual reward values as labels
    ax.set_xticks(range(len(binary_grouped)))
    ax.set_xticklabels(binary_grouped['reward_value_digit2'])

    # 2. BOTTOM LEFT: Matching law log-log plot (Binary Choice)
    ax = axs[1, 0]
    # Convert selection rates to response ratios for the log-log plot
    response_ratios = binary_grouped['selection_rate_mean'] / (1 - binary_grouped['selection_rate_mean'])

    ax.loglog(binary_grouped['reward_ratio'], response_ratios, 'o-')

    # Add ideal matching law line (y = x)
    min_ratio = binary_grouped['reward_ratio'].min()
    max_ratio = binary_grouped['reward_ratio'].max()
    ideal_line = np.linspace(min_ratio, max_ratio, 100)
    ax.loglog(ideal_line, ideal_line, 'k--', label='Matching Law Prediction')

    ax.set_xlabel('Reward Ratio (Digit 2 / Digit 5)')
    ax.set_ylabel('Response Ratio (Digit 2 / Digit 5)')
    ax.set_title('Experiment 1: Matching Law Log-Log Plot')
    ax.legend()
    ax.grid(True)

    # Format x-ticks to show the actual ratio values without trailing zeros
    ax.set_xticks(binary_grouped['reward_ratio'])
    ax.set_xticklabels([f'{ratio:.2f}'.rstrip('0').rstrip('.') if ratio == int(ratio) else f'{ratio:.2f}'
                        for ratio in binary_grouped['reward_ratio']])

    # ------- RIGHT COLUMN: Multi-Digit Experiment (Experiment 2) -------

    # 3. TOP RIGHT: Selection rates for just digit 2 (Multi-Digit)
    # Prepare digit column names for the multi-digit experiment
    digit_list = [2, 5, 8]  # Based on the provided experiment_2_transformer.py

    # Aggregate results for multi-digit experiment
    multi_grouped = multi_digit_results_df.groupby(f'reward_value_digit_{target_digit}').agg({
        f'selection_rate_digit_{d}': ['mean', 'std'] for d in digit_list
    }).reset_index()

    # Plot selection rate for only digit 2 with equal spacing
    ax = axs[0, 1]
    x_values = range(len(multi_grouped[f'reward_value_digit_{target_digit}']))

    # Only plot digit 2 data
    y_values = multi_grouped[(f'selection_rate_digit_{target_digit}', 'mean')]
    y_err = multi_grouped[(f'selection_rate_digit_{target_digit}', 'std')]
    ax.errorbar(x_values, y_values, yerr=y_err, fmt='o-', capsize=5,
               label=f'Digit {target_digit}')

    ax.set_xlabel(f'Reward Value for Digit {target_digit}')
    ax.set_ylabel('Selection Rate for Digit 2')
    ax.set_title(f'Experiment 2: Effect of Reward Amount on Selection Rate (3 Digits)')
    ax.grid(True)
    ax.legend()

    # Set x-ticks
    ax.set_xticks(x_values)
    ax.set_xticklabels(multi_grouped[f'reward_value_digit_{target_digit}'])

    # 4. BOTTOM RIGHT: Matching law for all digit pairs (Multi-Digit)
    ax = axs[1, 1]

    # Aggregate data for ratios
    ratio_cols = [col for col in multi_digit_results_df.columns if col.startswith('reward_ratio_') or
                 col.startswith('response_ratio_')]

    if ratio_cols:
        ratio_data = multi_digit_results_df.groupby(f'reward_value_digit_{target_digit}')[ratio_cols].mean()

        # Plot for each digit pair
        for digit in digit_list:
            if digit != target_digit:
                reward_ratio_col = f'reward_ratio_{target_digit}vs{digit}'
                response_ratio_col = f'response_ratio_{target_digit}vs{digit}'

                if reward_ratio_col in ratio_data.columns and response_ratio_col in ratio_data.columns:
                    ax.loglog(ratio_data[reward_ratio_col], ratio_data[response_ratio_col], 'o-',
                             label=f'{target_digit} vs {digit}')

        # Add ideal matching line
        if len(ratio_data) > 0:
            min_ratio = min([ratio_data[col].min() for col in ratio_data.columns
                           if col.startswith('reward_ratio_')])
            max_ratio = max([ratio_data[col].max() for col in ratio_data.columns
                           if col.startswith('reward_ratio_')])

            ideal_line = np.logspace(np.log10(max(0.1, min_ratio)), np.log10(max_ratio), 100)
            ax.loglog(ideal_line, ideal_line, 'k--', label='Matching Law Prediction')

    ax.set_xlabel('Reward Ratio')
    ax.set_ylabel('Response Ratio')
    ax.set_title('Experiment 2: Matching Law for Multiple Digits - Log-Log Plot')
    ax.grid(True)
    ax.legend()

    # Format x-ticks to show the same values as in the binary experiment
    ax.set_xticks(binary_grouped['reward_ratio'])
    ax.set_xticklabels([f'{ratio:.2f}'.rstrip('0').rstrip('.') if ratio == int(ratio) else f'{ratio:.2f}'
                        for ratio in binary_grouped['reward_ratio']])

    plt.tight_layout()
    plt.savefig('combined_experiments_comparison.png')

    return fig, axs

# Example usage:
if __name__ == "__main__":
    # Load the binary choice experiment results
    binary_results = pd.read_csv('matching_law_results.csv')

    # Load the multi-digit experiment results
    multi_digit_results = pd.read_csv('multi_digit_matching_law_results.csv')

    # Plot the combined results
    fig, axs = plot_combined_results(binary_results, multi_digit_results, target_digit=2)
    plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

def create_reward_pie_charts(binary_results_df, multi_digit_results_df, reward_levels=[1, 2, 4],
                        fixed_reward_binary=1, fixed_reward_multi=1, figsize=(18, 12)):
    # Number of rows based on number of experiments (2)
    # Number of columns based on number of reward levels
    fig, axes = plt.subplots(2, len(reward_levels), figsize=figsize)

    # Set a title for the entire figure
    fig.suptitle('Selection Percentages at Different Reward Levels', fontsize=16)

    # Colors for consistent identification across pie charts
    binary_colors = ['#3498db', '#e74c3c']  # Blue for digit 2, Red for digit 5
    multi_colors = ['#3498db', '#e74c3c', '#2ecc71']  # Blue for 2, Red for 5, Green for 8

    # ------- TOP ROW: Binary Choice Experiment -------
    for i, reward_level in enumerate(reward_levels):
        ax = axes[0, i]

        # Filter data for the specific reward level
        filtered_data = binary_results_df[binary_results_df['reward_value_digit2'] == reward_level]

        if not filtered_data.empty:
            # Get average selection rate for digit 2
            selection_rate_2 = filtered_data['selection_rate_digit2'].mean()
            # Calculate selection rate for digit 5 (the other option)
            selection_rate_5 = 1 - selection_rate_2

            # Get reward ratio
            reward_ratio = filtered_data['reward_ratio'].mean()

            # Data for pie chart
            labels = ['Digit 2', 'Digit 5']
            sizes = [selection_rate_2, selection_rate_5]

            # Create pie chart
            ax.pie(sizes, labels=labels, autopct='%1.1f%%', colors=binary_colors, startangle=90)
            ax.set_title(f'Binary Experiment\nRewards: Digit 2 = {reward_level}, Digit 5 = {fixed_reward_binary}\nReward Ratio = {reward_ratio:.2f}')
        else:
            ax.text(0.5, 0.5, f"No data for reward = {reward_level}",
                   horizontalalignment='center', verticalalignment='center')
            ax.axis('off')

    # ------- BOTTOM ROW: Multi-Digit Experiment -------
    digit_list = [2, 5, 8]  # Based on the provided experiment code

    for i, reward_level in enumerate(reward_levels):
        ax = axes[1, i]

        # Filter data for the specific reward level
        filtered_data = multi_digit_results_df[multi_digit_results_df['reward_value_digit_2'] == reward_level]

        if not filtered_data.empty:
            # Get average selection rate for each digit
            selection_rates = []
            for digit in digit_list:
                rate = filtered_data[f'selection_rate_digit_{digit}'].mean()
                selection_rates.append(rate)

            # Get reward ratios for each digit pair involving digit 2
            reward_ratios = {}
            for digit in [5, 8]:  # Other digits to compare with digit 2
                ratio_col = f'reward_ratio_2vs{digit}'
                if ratio_col in filtered_data.columns:
                    reward_ratios[f'2 vs {digit}'] = filtered_data[ratio_col].mean()

            # Create pie chart
            ax.pie(selection_rates, labels=[f'Digit {d}' for d in digit_list],
                  autopct='%1.1f%%', colors=multi_colors, startangle=90)

            # Add title with reward values and ratios
            title = f'Multi-Digit Experiment\nRewards: Digit 2 = {reward_level}, Digit 5 = {fixed_reward_multi}, Digit 8 = {fixed_reward_multi}'
            for pair, ratio in reward_ratios.items():
                title += f'\nRatio {pair} = {ratio:.2f}'
            ax.set_title(title)
        else:
            ax.text(0.5, 0.5, f"No data for reward = {reward_level}",
                   horizontalalignment='center', verticalalignment='center')
            ax.axis('off')

    plt.tight_layout()
    plt.subplots_adjust(top=0.9)  # Adjust for the main title
    plt.savefig('reward_pie_charts.png')

    return fig, axes


if __name__ == "__main__":
    # Load the binary choice experiment results
    binary_results = pd.read_csv('matching_law_results.csv')

    # Load the multi-digit experiment results
    multi_digit_results = pd.read_csv('multi_digit_matching_law_results.csv')

    # Fixed reward values for other digits
    fixed_reward_binary = 1  # Fixed reward for digit 5 in binary experiment
    fixed_reward_multi = 1   # Fixed reward for digits 5 and 8 in multi-digit experiment

    # Create pie charts with reward and ratio information
    fig, axes = create_reward_pie_charts(
        binary_results,
        multi_digit_results,
        fixed_reward_binary=fixed_reward_binary,
        fixed_reward_multi=fixed_reward_multi
    )

    plt.show()